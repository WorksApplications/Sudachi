/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id 'java'
    id 'maven-publish'
    id 'org.jetbrains.kotlin.jvm' version '1.6.21' // only for tests, see gradle.properties
    id 'jacoco'
    id 'org.sonarqube' version '3.3'
    id 'com.diffplug.spotless' version '6.6.1'
    id 'distribution'
    id 'signing'
    id 'me.champeau.jmh' version "0.6.6"
    id 'io.github.gradle-nexus.publish-plugin' version "1.1.0"
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    implementation 'org.glassfish:javax.json:1.1.4'
    implementation 'com.worksap.nlp:jdartsclone:1.2.0'
    testImplementation 'org.hamcrest:hamcrest:2.2'
    testImplementation 'org.hamcrest:hamcrest-library:2.2'
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.openjdk.jmh:jmh-core:1.35'
    testImplementation 'org.openjdk.jmh:jmh-generator-annprocess:1.35'
    testImplementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.6.21'
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit:1.6.21'
}

group = 'com.worksap.nlp'
version = '0.6.4'
description = 'Sudachi Japanese Morphological Analyzer'
java.sourceCompatibility = JavaVersion.VERSION_1_8

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.release = 8
}

tasks.withType(Test) {
    systemProperty "file.encoding", "UTF-8"
}

tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
}

jacocoTestReport {
    reports {
        xml.required = true
    }
}

sonarqube {
    properties {
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.organization", "worksapplications"
        property "sonar.projectKey", "com.worksap.nlp.sudachi"
        property "sonar.language", "java"
        property "sonar.links.homepage", "https://github.com/WorksApplications/Sudachi"
        property "sonar.links.ci", "https://github.com/WorksApplications/Sudachi/actions"
        property "sonar.links.issue", "https://github.com/WorksApplications/Sudachi/issues"
    }
}

// See https://github.com/diffplug/spotless/tree/main/plugin-gradle
spotless {
    // triggers https://github.com/diffplug/spotless/issues/911
    // ratchetFrom 'origin/develop'
    encoding 'UTF-8' // all formats will be interpreted as UTF-8

    format 'misc', {
        target '*.gradle', '*.md', '.gitignore', '*.txt', '*.csv'

        trimTrailingWhitespace()
        indentWithSpaces(2)
        endWithNewline()
    }
    java {
        // don't need to set target, it is inferred from java
        // version list: https://github.com/diffplug/spotless/tree/main/lib-extra/src/main/resources/com/diffplug/spotless/extra/eclipse_jdt_formatter
        eclipse('4.21.0').configFile('.formatter/eclipse-formatter.xml')
        licenseHeaderFile('.formatter/license-header')
    }
    kotlin {
        // by default the target is every '.kt' and '.kts` file in the java sourcesets
        ktfmt('0.36')
        licenseHeaderFile('.formatter/license-header')
    }
}

jar {
    manifest {
        attributes "Main-Class": 'com.worksap.nlp.sudachi.SudachiCommandLine'
        attributes "Class-Path": configurations.runtimeClasspath.collect { it.name }.join(" ")
    }
}

distributions {
    executable {
        contents {
            from jar
            from configurations.runtimeClasspath
            from fileTree('.') {
                include "README*"
                include "LICENSE*"
                include "licenses/*"
            }
            from fileTree("src/main/resources") {
                include "sudachi.json"
            }
            into "/"
        }
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/WorksApplications/Sudachi")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_USERNAME")
                password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
            }
        }
    }

    publications {
        maven(MavenPublication) {
            from(components.java)

            pom {
                url = "https://github.com/WorksApplications/Sudachi"
                name = 'Sudachi'
                description = project.description

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id = 'kazuma-t'
                        name = 'Kazuma TAKAOKA'
                        email = 'takaoka_k@worksap.co.jp'
                        timezone = 'Asia/Tokyo'
                    }
                }

                scm {
                    connection = 'scm:git:https://github.com/WorksApplications/Sudachi.git'
                    developerConnection = 'scm:git:ssh://git@github.com:WorksApplications/Sudachi.git'
                    url = 'https://github.com/WorksApplications/Sudachi'
                }

                issueManagement {
                    system = 'Github Issues'
                    url = 'https://github.com/WorksApplications/Sudachi/issues'
                }
            }
        }
    }
}

nexusPublishing {
    repositories {
        sonatype {
            username = project.findProperty("maven.user") ?: System.getenv("MAVEN_USERNAME")
            password = project.findProperty("maven.password") ?: System.getenv("MAVEN_USER_PASSWORD")
        }
    }
}

signing {
    def signingKey = project.findProperty("gpg.key") ?: System.getenv("MAVEN_GPG_PRIVATE_KEY")
    def signingPassword = project.findProperty("gpg.password") ?: System.getenv("MAVEN_GPG_PASSPHRASE")
    useInMemoryPgpKeys(signingKey, signingPassword)
    required { !project.version.endsWith("-SNAPSHOT") }
    sign publishing.publications.maven
}

jmh {
    jmhVersion = "1.35"
    includeTests = true
}
